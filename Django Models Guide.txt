# Created by 	- Mohammad Imam Hossain
# Email			- imambuet11@gmail.com
# Date 			- Sept. 24, 2022
# All rights reserved

Django Models:
---------------
Django Commands >>
    - First Django app, part 2: https://docs.djangoproject.com/en/4.0/intro/tutorial02/
    - Manage.py documentation: https://docs.djangoproject.com/en/4.0/ref/django-admin/
        >> python manage.py makemigrations      #creates new migrations based on the changes detected to your models.
                                                #Link>> https://docs.djangoproject.com/en/4.0/topics/migrations/
        >> python manage.py sqlmigrate app_label version_number #prints the SQL for the named migration
        >> python manage.py showmigrations      #shows all migrations in a project.
        >> python manage.py migrate             #synchronizes the database state with the current set of models and migrations

        >> python manage.py shell               #interactive python shell
        >> python manage.py inspectdb           #introspects the database tables in the database pointed-to by the NAME setting and output a Django model module (a models.py file) to standard output.
                                                #use this if you have a legacy database with which you'd like to use Django. The script will inspect the database and create a model for each table within it.
        >> python manage.py flush               #removes all data from the database and re-executes any post-synchronization handlers.
        >> python manage.py loaddata fixture [fixture ...] #Searches for and loads the contents of the named fixture into the database

Django Model API:
-----------------
- A model is the single, definitive source of information about your data.
- It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table.
Links >>
    - https://docs.djangoproject.com/en/4.0/topics/db/models/
    - https://docs.djangoproject.com/en/4.0/ref/models/fields/
    - https://docs.djangoproject.com/en/4.0/ref/models/options/

Model Field Options:
--------------------
    -> null         - Default False. If True, Django will store empty values as NULL
    -> blank        - Default False. If True, the field is allowed to be blank during model validation
    -> default      - The default value for this field
    -> unique       - If True, this field must be unique throughout the table
                    - unique_for_date, unique_for_month, unique_for_year
    -> primary_key  - If True, this field is the primary key for the model
                    - By default, Django gives each model an auto-incrementing primary key. For example, id=models.BigAutoField(primary_key=True)

    -> choices      - List of 2 tuples. Used during model validation
    -> db_column    - Name of the database column to use for this field
    -> db_index     - If True, a database index will be created for this field
    -> db_tablespace - The name of the database tablespace to use for this field's index, if the field is indexed.

    -> editable     - Default True. If False, the field will not be displayed in the admin or any other ModelForm. They are also skipped during model validation.
    -> verbose_name - A human readable name for the field
    -> error_messages - override the default messages that the field will raise
    -> help_text    - extra help text to be displayed with the form widget
    -> validators   - a list of validators to run for this field

Model Field Types:
------------------
    -> SmallAutoField()            - an AutoField with range 1 to 32767
    -> AutoField()                 - an IntegerField that automatically increments according to available IDs
    -> BigAutoField()              - a 64-bit integer AutoField with range 1 to 9223372036854775807

    -> BooleanField()              - a True/False field

    -> SmallIntegerField()         - an IntegerField with range -32768 to 32767
    -> IntegerField()              - an integer value within the range from -2147483648 to 2147483647
    -> BigIntegerField()           - a 64-bit IntegerField
    -> PositiveSmallIntegerField() - a PositiveIntegerField with range 0 to 32767
    -> PositiveIntegerField()      - a positive IntegerField with range 0 to 2147483647
    -> PositiveBigIntegerField()   - a 64 bit PositiveIntegerField

    -> DecimalField(max_digits=None, decimal_places=None) - a fixed-precision decimal number
    -> FloatField()                 - a floating-point number

    -> BinaryField(max_length=None) - a field to store raw binary data
    -> CharField(max_length=None)   - a string field
    -> EmailField(max_length=254)   - a CharField using EmailValidator
    -> SlugField(max_length=50)     - a string containing only letters, numbers, underscores or hyphens
    -> URLField(max_length=200)     - a CharField for a URL
    -> UUIDField()                  - a field for storing universally unique identifiers
    -> TextField()                  - a large text field

    -> DateField(auto_now=False, auto_now_add=False)
            - a date, represented in Python by a datetime.date instance
            - auto_now: automatically set the field to now every time the object is saved.
            - auto_now_add: automatically set the field to now when the object is first created.
    -> DateTimeField(auto_now=False, auto_now_add=False)
    -> TimeField(auto_now=False, auto_now_add=False)

    -> FileField(upload_to=None, max_length=100, **options)
    -> ImageField(upload_to=None, max_length=100, height_field=None, width_field=None, **options)
    -> FilePathField(...)

Model Meta options:
-------------------
    - abstract = True       ; this model will be an abstract base class
    - app_label = 'myapp'   ; if a model is defined outside of an application in INSTALLED_APPS, it must declare which app it belongs to
    - db_table = 'table_name' ; the name of the database table to use for this model
    - db_tablespace = 'tablespace_name' ; the name of the database tablespace to use for this model
    - ordering = ['col1', '-col2'] ; the default ordering for the object, for use when obtaining lists of objects
    - unique_together = ['col1', 'col2'] ; sets of field names that taken together, must be unique
    - verbose_name = "human-readable name for the object"


Relationship Fields:
---------------------
    -> ForeignKey(to, on_delete, **options)
        - a many-to-one relationship
        - for recursive relationship, models.ForeignKey('self', on_delete=models.CASCADE)
        - on_delete = CASCADE/PROTECT/RESTRICT/SET NULL/SET DEFAULT/DO_NOTHING
        - models.ForeignKey(Manufacturer, on_delete=models.CASCADE)
    -> ManyToManyField(to, **options)
        - a many-to-many relationship
        - through = this option specify the Django model that represents the intermediate table
        - models.ManyToManyField(Topping)
    -> OneToOneField(to, on_delete, parent_link=False, **options)
        - a one-to-one relationship
        - models.OneToOneField(Piece, on_delete=models.CASCADE)

    -> To refer to models defined in another application, you can explicitly specify a model with the full application label.
       For example, if the Manufacturer model is defined in another application called production, you’d need to use:
        - models.ForeignKey('production.Manufacturer', on_delete=models.CASCADE)

Model Instance Reference:
--------------------------
Link: https://docs.djangoproject.com/en/4.0/ref/models/instances/

By default, Django gives each model an auto-incrementing primary key with the type specified per app in AppConfig.default_auto_field
or globally in the DEFAULT_AUTO_FIELD setting. For example,
    id = models.BigAutoField(primary_key=True)
For convenience, each model has an AutoField named id by default unless you explicitly specity primary_key=True on a field in your model.
    -> model attribute: pk
    -> Equivalent statements:
            >> Blog.objects.get(id__exact=14)  # Explicit form
            >> Blog.objects.get(id=14)         # __exact is implied
            >> Blog.objects.get(pk=14)         # pk implies id__exact
    -> use model.fieldname to access/update any field of model object
    -> save(force_insert=False, force_update=False, using=DEFAULT_DB_ALIAS, update_fields=None)
    -> delete(using=DEFAULT_DB_ALIAS, keep_parents=False)
    -> get_absolute_url() - define this method to tell Django how to calculate the canonical URL for an object.

QuerySet API Reference:
------------------------
Link: https://docs.djangoproject.com/en/4.0/ref/models/querysets/

    QuerySet(model=None, query=None, using=None, hints=None)
    - You get a QuerySet by using your model's Manager. Each model has at least one Manager, and it’s called objects by default. Access it directly via the model class

    Public Attributes >>
        ordered - True if the QuerySet is ordered
        db      - The database that will be used if this query is executed now

    Frequently Used Methods >>
        filter(**kwargs)    - returns a new QuerySet containing objects that match the given lookup parameters
        exclude(**kwargs)   - returns a new QuerySet containing objects that do not match the given lookup parameters


        order_by(*fields)   - orders the QuerySet objects
                            - Entry.objects.order_by('-pub_date','deadline')
                            - Entry.objects.order_by('blog__name')
                            - You can also order by query expressions by calling asc() or desc() on the expression. asc() and desc() have arguments (nulls_first and nulls_last) that control how null values are sorted.
        reverse()           - reverses the order of QuerySet objects

        distinct(*fields)   - eliminates duplicate rows from the query results

        all()               - returns a copy of the current QuerySet

        values(*fields, **expressions) - returns a QuerySet that returns dictionaries, rather than model instances, when used as an iterable.
                                       - Blog.objects.filter(name__startswith='Beatles').values()
                                       - Blog.objects.values('id', 'name')

        union(*other_qs, all=False) - uses SQL's UNION operator to combine the results of two or more QuerySets.
                                    - To allow duplicate values, use the all=True argument.
        intersection()      - uses SQL's INTERSECT operator to return the shared elements of two or more QuerySets.
        difference()        - uses SQL's EXCEPT operator to keep only elements present in the QuerySet but not in some other QuerySets.

        raw(raw_query, params=None, translation=None) - takes a raw SQL query, executes it, and returns a RawQuerySet instance.
        AND(&)          - Model.objects.filter(x=1) & Model.objects.filter(y=2)
                        - Model.objects.filter(x=1,y=2)
                        - from django.db.models import Q
                          Model.objects.filter(Q(x=1) & Q(y=2))

        OR(|)           - Model.objects.filter(x=1) | Model.objects.filter(y=2)
                        - from django.db.models import Q
                          Model.objects.filter(Q(x=1) | Q(y=2))


        Other Methods:
        --------------
        annotate(*args, **kwargs) - annotate each object in the QuerySet with the provided list of query expressions.
        values_list(*fields, flat=False, named=False) - returns tuples when iterated over
        none()          - Entry.objects.none() # a queryset that never returns any objects
        extra(select=None, where=None,params=None,tables=None,oder_by=None,select_params=None) - sometimes Django query syntax by itself can't easily express a complex WHERE clause. For these edge cases, Django provides the extra() QuerySet modifiier.
        defer(*fields)  - during initial data fetch if you are not sure to fetch contains fields data then you can tell Django not to retrieve them from the database
        only(*fields)   - call it with the fields that should not be deferred when retrieving a model.
        using(alias)    - Controls which database the QuerySet will be evaluated against if you are using more than one database.
        select_related(*fields)        - returns a QuerySet that will "follow" foreign-key relationships, selecting additional related-object data when it executes its query.
        prefetch_related(*lookup)      - returns a QuerySet that will automatically retrieve, in a single batch, related objects for each of the specified loopups.

    Methods that do not return QuerySets >>
        get(**kwargs)   - returns the object matching the given lookup parameters.
                        - lookups should be unique
                        - Entry.objects.get(id=1)
                        - If it doesn't find any object, it raises a Model.DoesNotExist exception
                        - If it finds more than one object, it raises a Model.MultipleObjectsReturned exception

        create(**kwargs)- a convenience method for creating an object and saving it all in one step.
                        - Person.objects.create(first_name="Walter",last_name="White")

        update(**kwargs)- performs an SQL update query for the specified fields, and returns the number of rows matched.
                        - Entry.objects.filter(pub_date__year=2010).update(comments_on=False, headline='This is old')
                        - Only restriction on the QuerySet that is updated is that it can only update columns in the model’s main table, not on related models.
                            >> Entry.objects.update(blog__name='foo') # Won't work!
                        - You cannot call update() on a QuerySet that has had a slice taken or can otherwise no longer be filtered.

        delete()        - performs an SQL delete query on all rows in the QuerySet and returns the number of objects deleted, and a dictionary with the number of deletions per object type.
                        - Entry.objects.filter(blog=b).delete()

        count()         - returns an integer representing the number of objects in the database matching QuerySet.

        first()         - returns the first object matched by the queryset, or None
        last()          - returns the last object in the queryset, or None

        exists()        - returns True if the QuerySet contains any results, and False if not.

        contains(obj)   - return True if the QuerySet contains obj, and False if not.

        aggregate(*args, **kwargs)  - returns a dictionary of aggregate values calculated over the queryset
                                    - Aggregation functions return None when used with an empty QuerySet.

        Other Methods:
        --------------
        get_or_create(defaults=None, **kwargs) - a convenience method for looking up an object with the given kwargs, creating one if necessary
        update_or_create(defaults=None, **kwargs) - a convenience method for updating an object with the given kwargs, creating a new one if necessary
        bulk_create(objs,batch_size=None,ignore_conflics=False) - inserts the provided list of objects into the databse in an efficient manner.
        bulk_update(objs,fields,batch_size=None) - efficiently updates the given fields on the provided model instances.

        latest(*fields)   - returns the latest object in the table based on the given field(s)
        earliest(*fields) - works otherwise like latest() except the direction is changed

    Field Lookups:
    --------------
    exact   - Entry.objects.get(id__exact=14)
            - Entry.objects.get(id__exact=None)
        Similar: iexact

    contains- Entry.objects.get(headline__contains='Lennon')
        Similar: icontains

    in      - Entry.objects.filter(id__in=[1,3,4])

    range   - Entry.objects.filter(pubdate__range=(start_date, end_date))

    isnull  - Entry.objects.filter(pubdate__isnull=True)

    regex   - Entry.objects.get(title__regex=r'^(An?|The) +')
        Similar: iregex

    gt      - Entry.objects.filter(id__gt=4)
        Similar: gte,lt,lte

    startswith  - Entry.objects.filter(headline__startswith='Lenon')
        Similar: istartswith

    endswith    - Entry.objects.filter(headline__endswith='Lenon')
        Similar: iendswith

    date        - Entry.objects.filter(pubdate__date=datetime.date(2005,1,1))
        Similar: year, month, day, week, week_day, quarter, time, hour, minute, second

    Database Functions:
    -------------------
    Link: https://docs.djangoproject.com/en/4.0/ref/models/database-functions/
    Module: from djagno.db.models.functions import func_name
        - Coalesce(), Now()
        - Abs(), ACos(), ASin(), ATan(), Ceil(), Cos, Cot, Degrees, Exp(), Floor(), Ln(), Log(), Mod(), Pi(), Power(), Radians(), Random(), Round(), Sign(), Sin(), Sqrt(), Tan()
        - Concat(), Left(), Length(), Lower(), LPad(), LTrim(), MD5(), Replace(), Reverse(), Right(), RPad(), RTrim(), SHA1, SHA224, SHA256, SHA384, SHA 512, StrIndex(), Substr(), Trim(), Upper()

Making Queries: https://docs.djangoproject.com/en/4.0/topics/db/queries/
    - Each model has at least one Manager, and it’s called objects by default. Access it directly via the model class.

Query Operations:
------------------
- Related Objects Reference:
    Link: https://docs.djangoproject.com/en/4.0/ref/models/relations/
    -  Used in one-to-many(models.ForeignKey) and many-to-many(models.ManyToManyField) related context.
        Blog(...) <------ Entry(blog(FK),...)

        -> b.entry_set.all() #returns all Entry objects related to Blog
        -> b.entry_set.add(e) #associates, using add() on a relation that already exists won’t duplicate the relation, but it will still trigger signals
        -> b.entry_set.remove(e) #disassocites
        -> b.entry_set.clear()   #disassociates all
        -> b.entry_set.set(new_list_of_objects) #replace associations
        -> e=b.entry_set.create(headline="hello",body_text="hi",pub_date=...) #create an object and associates

- One to One:
    Link: https://docs.djangoproject.com/en/4.0/topics/db/examples/one_to_one/

    Place(name, address) <---------> Restaurant(place(FK), serves_hot_dogs, serves_pizza)

    Creating Place Object:
        p1=Place(name="PizzaTown", address="Khilgaon")
        p1.save()

    Creating Restaurant Object:
        r1=Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)
        r1.save()

    To get/set the related place: r1.place, r1.place=p1
    To get/set the related restaurant: p1.restaurant, p1.restaurant=r1

    To search:
        Place.objects.get(restaurant=r1)
        Place.objects.get(restaurant__place=p1)

        Restaurant.objects.get(place=p1)
        Restaurant.objects.get(place__name__startswith='Pizza')

- Many to One:
    Link: https://docs.djangoproject.com/en/4.0/topics/db/examples/many_to_one/

    Reporter(first_name, last_name, email) <---------- Article(headline, pub_date, reporter(FK))

    Creating Reporter Object:
        r=Reporter(first_name='John', last_name="Smith", email="john@gmail.com")
        r.save()

    Creating Article Object:
        a=Article(headline="demo1", pub_date=datetime.date(2005,7,27), reporter=r)
        a.save()

        or,
        new_article=r.article_set.create(headline="demo2",pub_date=datetime.date(2021,10,10))

    Adding association:
        r2.article_set.add(new_article2)

    Search associated table:
        r.article_set.filter(headline__startswith='This')

        Article.objects.filter(reporter__first_name='John')
        Reporter.objects.filter(article__pk=1)

- Many to Many: https://docs.djangoproject.com/en/4.0/topics/db/examples/many_to_many/

    Publication(title) ---------------- Article(headline, publications(FK))

    Creating Publication Object:
        p1=Publication(title="demo title")
        p1.save()

        or,
        p2=a2.publications.create(title="demo publication")

    Creating Article Object:
        a1=Article(headline="demo headline")
        a1.save()
        a1.publications.add(p1, p2)

        or,
        a2=p2.article_set.create(headline="demo headline")

    Association:
        a1.publications.add(p3), a1.publications.remove(p3)
        p1.article_set.add(a4), p1.article_set.remove(a5)

    Searching:
        p2.article_set.all()

        Article.objects.filter(publications__id=1)
        Publication.objects.filter(article__headline__startswith="NASA")

- Aggregate operations:
    Link: https://docs.djangoproject.com/en/4.0/topics/db/aggregation/

    Author(name, age)   ---------------------------  Book(name, pages, price, rating, authors(Foreign Key), publisher(Foreign key), pubdate)  ---------------  Store(name, books(Foreign Key))
                                                                                                                |
    Publisher(name)     <----------------------------------------------------------------------------------------

    Aggregation Functions:
    ----------------------
    Functions:
    Module: from django.db.models import Count, Max, Min, Avg, Sum
        Avg(expression, output_field=None, distinct=False, filter=None, **extra)
        Count(expression, distinct=False, filter=None, **extra)
        Max(expression, output_field=None, filter=None, **extra)
        Min(expression, output_field=None, filter=None, **extra)
        Sum(expression, output_field=None, distinct=False, filter=None, **extra)

    Example:
        - Book.objects.aggregate(Max('price'), Min('price'), Avg('price'), Count('price'))
        - Book.objects.aggregate(average_price=Avg('price'))
        - Book.objects.count()

    Generating aggregates for each item:
        - q=Book.objects.annotate(num_authors=Count('authors'))
          q[0].num_authors
        - Author.objects.values('name').annotate(average_rating=Avg('book__rating'))
          It groups authors by their name
        - Combining multiple aggregations with annotate() will yield the wrong results because joins are used instead of subqueries.
          Wrong: Book.objects.annotate(Count('authors'), Count('store'))
          Right: Book.objects.annotate(Count('authors', distinct=True), Count('store', distinct=True))
        - Author.objects.annotate(average_rating=Avg('book__rating')).values('name', 'average_rating')


More Read:
- How to provide initial data for models: https://docs.djangoproject.com/en/4.0/howto/initial-data/
    - By default, Django looks in the 'fixtures' directory inside each app for fixtures.
    - You can set the FIXTURE_DIRS setting to a list of additional directories where Django should look.
    - When running manage.py loaddata, you can also specify a path to a fixture file, which overrides searching the usual directories.

- How to integrate Django with a legacy database: https://docs.djangoproject.com/en/4.0/howto/legacy-databases/

-------------------------- <<<<< THE END >>>>> ------------------------------------------------------
